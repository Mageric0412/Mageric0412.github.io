---
author: mageric
comments: true
date: 2015-09-17 11:14:50+00:00
layout: post
title: Rector模式与Proactor模式
categories:
- Java
tags:
- 多线程
- Java
---
### 概述
&#160; &#160; &#160;&#160;系统I/O可分为**阻塞型**，**非阻塞同步型**以及**非阻塞异步型**。    
&#160; &#160; &#160;&#160;**阻塞型I/O**意味着控制权只到调用操作结束了才会回到调用者手里。     
&#160; &#160; &#160;&#160;**非阻塞同步**是会立即返回控制权给调用者的。调用者不需要等待，它从调用的函数获取两种结果：要么此次调用成功进行;要么系统返回错误标识告诉调用者当前资源不可用，你再等等或者再试度看吧。比如read()操作， 如果当前socket无数据可读，则立即返回EWOULBLOCK/EAGAIN，告诉调用read()者”数据还没准备好，你稍后再试”。     
&#160; &#160; &#160;&#160;**非阻塞异步**调用中，稍有不同。调用函数在立即返回时，还告诉调用者，这次请求已经开始了。系统会使用另外的资源或者线程来完成这次调用操作，并在完成的时候知会调用者（比如通过回调函数）。POSIX的aio_read()来说，调用它之后，函数立即返回，操作系统在后台同时开始读操作。即是将工作交给了内核去完成这个操作。    
在以上三种IO形式中，**非阻塞异步**是**性能最高、伸缩性最好**的。

### 两种IO多路复用方案:Reactor and Proactor
&#160; &#160; &#160;&#160;一般情况下，I/O 复用机制需要事件分享器(event demultiplexor)。 事件分享器的作用，即将那些读写事件源分发给各读写事件的处理者，就像送快递的在楼下喊: 谁的什么东西送了， 快来拿吧。开发人员在开始的时候需要在分享器那里注册感兴趣的事件，并提供相应的处理者(event handlers)，或者是回调函数; 事件分享器在适当的时候会将请求的事件分发给这些handler或者回调函数。

#### **Reactor模式**
&#160; &#160; &#160;&#160;Java NIO非堵塞技术实际是采取反应器模式，或者说是观察者(observer)模式为我们监察I/O端口，如果有内容进来，会自动通知我们，这样，我们就不必开启多个线程死等，从外界看，实现了流畅的I/O读写，不堵塞了。    
&#160; &#160; &#160;&#160;NIO 有一个主要的类Selector，这个类似一个观察者，只要我们把需要探知的socketchannel告诉Selector，我们接着做别的事情，当有事件发生时，他会通知我们，传回一组SelectionKey，我们读取这些Key，就会获得我们刚刚注册过的socketchannel，然后，我们从这个Channel中读取数据，接着我们可以处理这些数据。     
&#160; &#160; &#160;&#160;反应器模式与观察者模式在某些方面极为相似：当一个主体发生改变时，所有依属体都得到通知。不过，观察者模式与单个事件源关联，而反应器模式则与多个事件源关联 。
![ ](http://7xvk1t.com1.z0.glb.clouddn.com/image/java/reactor.png)
&#160; &#160; &#160;&#160;反应者实现：
{% highlight java %}
    package com.linxcool.reactor;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.InetSocketAddress;
    import java.nio.channels.SelectionKey;
    import java.nio.channels.Selector;
    import java.nio.channels.ServerSocketChannel;
    import java.util.Iterator;
    import java.util.Set;
    /**
     * 反应器模式
     * 用于解决多用户访问并发问题
     *
     * 举个例子：餐厅服务问题
     *
     * 传统线程池做法：来一个客人(请求)去一个服务员(线程)
     * 反应器模式做法：当客人点菜的时候，服务员就可以去招呼其他客人了，等客人点好了菜，直接招呼一声“服务员”
     *
     * @author linxcool
     */
    public class Reactor implements Runnable{
    	public final Selector selector;
    	public final ServerSocketChannel serverSocketChannel;
    	public Reactor(int port) throws IOException{
    		selector=Selector.open();
    		serverSocketChannel=ServerSocketChannel.open();
    		InetSocketAddress inetSocketAddress=new InetSocketAddress(InetAddress.getLocalHost(),port);
    		serverSocketChannel.socket().bind(inetSocketAddress);
    		serverSocketChannel.configureBlocking(false);
    		//向selector注册该channel  
    		SelectionKey selectionKey=serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);
    		//利用selectionKey的attache功能绑定Acceptor 如果有事情，触发Acceptor
    		selectionKey.attach(new Acceptor(this));
    	}
    	@Override
    	public void run() {
    		try {
    			while(!Thread.interrupted()){
    				selector.select();
    				Set selectionKeys= selector.selectedKeys();
    				Iterator it=selectionKeys.iterator();
    				//Selector如果发现channel有OP_ACCEPT或READ事件发生，下列遍历就会进行。
    				while(it.hasNext()){
    					//来一个事件 第一次触发一个accepter线程  
    					//以后触发SocketReadHandler
    					SelectionKey selectionKey=it.next();
    					dispatch(selectionKey);
    					selectionKeys.clear();
    				}
    			}
    		} catch (IOException e) {
    			e.printStackTrace();
    		}
    	}
    	/**
    	 * 运行Acceptor或SocketReadHandler
    	 * @param key
    	 */
    	void dispatch(SelectionKey key) {
    		Runnable r = (Runnable)(key.attachment());  
    		if (r != null){  
    			r.run();
    		}  
    	}  
    }
{% endhighlight %}
&#160; &#160; &#160;&#160;接受者实现：
{% highlight java %}
    package com.linxcool.reactor;
    import java.io.IOException;
    import java.nio.channels.SocketChannel;
    public class Acceptor implements Runnable{
    	private Reactor reactor;
    	public Acceptor(Reactor reactor){
    		this.reactor=reactor;
    	}
    	@Override
    	public void run() {
    		try {
    			SocketChannel socketChannel=reactor.serverSocketChannel.accept();
    			if(socketChannel!=null)//调用Handler来处理channel
    				new SocketReadHandler(reactor.selector, socketChannel);
    		} catch (IOException e) {
    			e.printStackTrace();
    		}
    	}
    }
{% endhighlight %}
&#160; &#160; &#160;&#160;Handler实现：
{% highlight java %}
    package com.linxcool.reactor;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    import java.nio.channels.SelectionKey;
    import java.nio.channels.Selector;
    import java.nio.channels.SocketChannel;
    public class SocketReadHandler implements Runnable{
    	private SocketChannel socketChannel;
    	public SocketReadHandler(Selector selector,SocketChannel socketChannel) throws IOException{
    		this.socketChannel=socketChannel;
    		socketChannel.configureBlocking(false);
    		SelectionKey selectionKey=socketChannel.register(selector, 0);
    		//将SelectionKey绑定为本Handler 下一步有事件触发时，将调用本类的run方法。  
    		//参看dispatch(SelectionKey key)  
    		selectionKey.attach(this);
    		//同时将SelectionKey标记为可读，以便读取。  
    		selectionKey.interestOps(SelectionKey.OP_READ);  
    		selector.wakeup();
    	}
    	/**
    	 * 处理读取数据
    	 */
    	@Override
    	public void run() {
    		ByteBuffer inputBuffer=ByteBuffer.allocate(1024);
    		inputBuffer.clear();
    		try {
    			socketChannel.read(inputBuffer);
    			//激活线程池 处理这些request
    			//requestHandle(new Request(socket,btt));
    		} catch (IOException e) {
    			e.printStackTrace();
    		}
    	}
    }
{% endhighlight %}

#### **Proactor模式**
&#160; &#160; &#160;&#160;在Proactor模式中，事件处理者(或者代由事件分离者发起)直接发起一个异步读写操作(相当于请求)，而实际的工作是由操作系统来完成的。发起时，需要提供的参数包括用于存放读到数据的缓存区，读的数据大小，或者用于存放外发数据的缓存区，以及这个请求完后的回调函数等信息。事件分离者得知了这个请求，它默默等待这个请求的完成，然后转发完成事件给相应的事件处理者或者回调。这种异步模式的典型实现是基于操作系统底层异步API的，所以我们可称之为“系统级别”的或者“真正意义上”的异步，因为具体的读写是由操作系统代劳的。
![](http://7xvk1t.com1.z0.glb.clouddn.com/image/java/proactor.jpg)
&#160; &#160; &#160;&#160;示例代码：
{% highlight java %}
    class AsyIOProcessor
    {
    public:
        void do_read()
        {
            //send read operation to OS
            // read io finished.and dispatch notification
            _proactor->dispatch_read();
        }
    private:
        Proactor *_proactor;
    };

    class Proactor
    {
    public:
        void dispatch_read()
        {
            _handlerMgr->onRead();
        }
    private:
        HandlerManager *_handlerMgr;
    };

    class HandlerManager
    {
    public:
        typedef std::list<Handler*> HandlerList;
    public:
        void onRead()
        {
            // notify all the handlers.
            std::for_each( _handlers.begin(), _handlers.end(), onRead );
        }
    private:
        HandlerList *_handlers;
    };

    class Handler
    {
    public:
        virtual void onRead() = 0;
    };
    // application level handler.
    class MyHandler : public Handler
    {
    public:
        void onRead()
        {
            //
        }
    };
{% endhighlight %}
